# Dependencies and Setup
import pandas as pd
from pathlib import Path

# File to Load (Remember to Change These)
school_data_to_load = Path("c:\\users\hespr\onedrive\desktop\homework\pandas-challenge\starter_code\pycityschools\Resources\schools_complete.csv")
student_data_to_load = Path("c:\\users\hespr\onedrive\desktop\homework\pandas-challenge\starter_code\pycityschools\Resources\students_complete.csv")

# Read School and Student Data File and store into Pandas DataFrames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset.  
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])
school_data_complete.head()

# Calculate the total number of unique schools
school_count = len(school_data_complete["school_name"].unique())
school_count

# Calculate the total number of students
student_count = school_data_complete["student_name"].count()
student_count

# Calculate the total budget
total_budget = school_data_complete["budget"].unique().sum()
total_budget

# Calculate the average (mean) math score
average_math_score = school_data_complete["math_score"].mean()
average_math_score

# Calculate the average (mean) reading score
average_reading_score = school_data_complete["reading_score"].mean()
average_reading_score

# Use the following to calculate the percentage of students who passed math (math scores greather than or equal to 70)
passing_math_count = school_data_complete[(school_data_complete["math_score"] >= 70)].count()["student_name"]
passing_math_percentage = passing_math_count / float(student_count) * 100
passing_math_percentage

# Calculate the percentage of students who passed reading (hint: look at how the math percentage was calculated)  
passing_reading_count = school_data_complete[(school_data_complete["reading_score"] >= 70)].count()["student_name"]
passing_reading_percentage = passing_reading_count / float(student_count) * 100
passing_reading_percentage

# Use the following to calculate the percentage of students that passed math and reading
passing_math_reading_count = school_data_complete[
    (school_data_complete["math_score"] >= 70) & (school_data_complete["reading_score"] >= 70)
].count()["student_name"]
overall_passing_rate = passing_math_reading_count /  float(student_count) * 100
overall_passing_rate

# Create a high-level snapshot of the district's key metrics in a DataFrame
data = [[school_count, student_count, total_budget, average_math_score, average_reading_score, 
         passing_math_percentage, passing_reading_percentage, overall_passing_rate]]
district_summary = pd.DataFrame(data = data, columns = ["Total Schools", "Total Students", 
        "Total Budget", "Average Math Score", "Average Reading Score", "% Passing Math", "% Passing Reading", 
        "% Overall Passing Rate"])

# Formatting
district_summary["Total Students"] = district_summary["Total Students"].map("{:,}".format)
district_summary["Total Budget"] = district_summary["Total Budget"].map("${:,.2f}".format)

# Display the DataFrame
district_summary.head()

# Use the code provided to select all of the school types
school_types = school_data_complete.groupby(["school_name"])["type"].first()
print(school_types)

# Calculate the total student count per school
per_school_counts = school_data_complete.groupby(["school_name"])["school_name"].count()
per_school_counts

# Calculate the total school budget and per capita spending per school
per_school_budget = school_data_complete.groupby(["school_name"])["budget"].first()
print(per_school_budget)
per_school_capita = per_school_budget / per_school_counts
print(per_school_capita)

# Calculate the average test scores per school
per_school_math = school_data_complete.groupby(["school_name"])["math_score"].mean()
print(per_school_math)
per_school_reading = school_data_complete.groupby(["school_name"])["reading_score"].mean()
print(per_school_reading)

# Calculate the number of students per school with math scores of 70 or higher
students_passing_math = school_data_complete[school_data_complete['math_score'] >= 70]
school_students_passing_math = students_passing_math.groupby('school_name')['school_name'].count()
print(school_students_passing_math)

# Calculate the number of students per school with reading scores of 70 or higher
students_passing_reading = school_data_complete[school_data_complete['reading_score'] >= 70]
school_students_passing_reading = students_passing_reading.groupby('school_name')['school_name'].count()
school_students_passing_reading

# Use the provided code to calculate the number of students per school that passed both math and reading with scores of 70 or higher
students_passing_math_and_reading = school_data_complete[
    (school_data_complete["reading_score"] >= 70) & (school_data_complete["math_score"] >= 70)]
school_students_passing_math_and_reading = students_passing_math_and_reading.groupby(["school_name"]).size()

# Use the provided code to calculate the passing rates
per_school_passing_math = school_students_passing_math / per_school_counts * 100
print(per_school_passing_math)
per_school_passing_reading = school_students_passing_reading / per_school_counts * 100
print(per_school_passing_reading)
overall_passing_rate = school_students_passing_math_and_reading / per_school_counts * 100
print(overall_passing_rate)

# Create a DataFrame called `per_school_summary` with columns for the calculations above.
school_type_df = school_data_complete.groupby(["school_name"])["type"].first().reset_index(name="School Type")
merge_school = pd.merge(school_type_df, per_school_counts.reset_index(name="Total Students"), on="school_name")
merge_school = pd.merge(merge_school, per_school_budget.reset_index(name="Total School Budget"), on="school_name")
merge_school = pd.merge(merge_school, per_school_capita.reset_index(name="Per Student Budget"), on="school_name")
merge_school = pd.merge(merge_school, per_school_math.reset_index(name="Average Math Score"), on="school_name")
merge_school = pd.merge(merge_school, per_school_reading.reset_index(name="Average Reading Score"), on="school_name")
merge_school = pd.merge(merge_school, per_school_passing_math.reset_index(name="% Passing Math"), on="school_name")
merge_school = pd.merge(merge_school, per_school_passing_reading.reset_index(name="% Passing Reading"), on="school_name")
merge_school = pd.merge(merge_school, overall_passing_rate.reset_index(name="% Overall Passing"), on="school_name")
merge_school.set_index("school_name")
per_school_summary = pd.DataFrame(merge_school, columns = ["school_name", "School Type", "Total Students", 
                    "Total School Budget", "Per Student Budget", "Average Math Score", 
                    "Average Reading Score", "% Passing Math", "% Passing Reading", "% Overall Passing"])
per_school_summary.set_index("school_name", inplace=True, drop=True)
per_school_summary.index.name=None
# Formatting
per_school_summary["Total School Budget"] = per_school_summary["Total School Budget"].map("${:,.2f}".format)
per_school_summary["Per Student Budget"] = per_school_summary["Per Student Budget"].map("${:,.2f}".format)

# Display the DataFrame
per_school_summary

# Sort the schools by `% Overall Passing` in descending order and display the top 5 rows.
top_schools = per_school_summary.sort_values("% Overall Passing", ascending=False)
top_schools.head(5)

# Sort the schools by `% Overall Passing` in ascending order and display the top 5 rows.
bottom_schools = per_school_summary.sort_values("% Overall Passing", ascending=True)
bottom_schools.head(5)

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the `math_score` column for each.
ninth_grade_math_scores = ninth_graders.groupby(["school_name"])["math_score"].mean().reset_index(name="9th")
tenth_grader_math_scores = tenth_graders.groupby(["school_name"])["math_score"].mean().reset_index(name="10th")
eleventh_grader_math_scores = eleventh_graders.groupby(["school_name"])["math_score"].mean().reset_index(name="11th")
twelfth_grader_math_scores = twelfth_graders.groupby(["school_name"])["math_score"].mean().reset_index(name="12th")

# Combine each of the scores above into single DataFrame called `math_scores_by_grade`
merge_grade = pd.merge(ninth_grade_math_scores, tenth_grader_math_scores, on="school_name")
merge_grade = pd.merge(merge_grade, eleventh_grader_math_scores, on="school_name") 
merge_grade = pd.merge(merge_grade, twelfth_grader_math_scores, on="school_name")
math_scores_by_grade = merge_grade
district_summary = pd.DataFrame(data = math_scores_by_grade, columns = ["9th", "10th", "11th", "12th"])

# Minor data wrangling
math_scores_by_grade.index.name = None

# Display the DataFrame
math_scores_by_grade

# Use the code provided to separate the data by grade
ninth_graders = school_data_complete[(school_data_complete["grade"] == "9th")]
tenth_graders = school_data_complete[(school_data_complete["grade"] == "10th")]
eleventh_graders = school_data_complete[(school_data_complete["grade"] == "11th")]
twelfth_graders = school_data_complete[(school_data_complete["grade"] == "12th")]

# Group by `school_name` and take the mean of the the `reading_score` column for each.
ninth_grade_reading_scores = ninth_graders.groupby(["school_name"])["reading_score"].mean().reset_index(name="9th")
tenth_grader_reading_scores = tenth_graders.groupby(["school_name"])["reading_score"].mean().reset_index(name="10th")
eleventh_grader_reading_scores = eleventh_graders.groupby(["school_name"])["reading_score"].mean().reset_index(name="11th")
twelfth_grader_reading_scores = twelfth_graders.groupby(["school_name"])["reading_score"].mean().reset_index(name="12th")

# Combine each of the scores above into single DataFrame called `reading_scores_by_grade`
merge_grade = pd.merge(ninth_grade_reading_scores, tenth_grader_reading_scores, on="school_name")
merge_grade = pd.merge(merge_grade, eleventh_grader_reading_scores, on="school_name") 
merge_grade = pd.merge(merge_grade, twelfth_grader_reading_scores, on="school_name")
reading_scores_by_grade = merge_grade
district_summary = pd.DataFrame(data = reading_scores_by_grade, columns = ["9th", "10th", "11th", "12th"])


# Minor data wrangling
reading_scores_by_grade.index.name = None

# Display the DataFrame
reading_scores_by_grade

# Establish the bins 
spending_bins = [0, 585, 630, 645, 680]
labels = ["<$585", "$585-630", "$630-645", "$645-680"]

# Create a copy of the school summary since it has the "Per Student Budget" 
school_spending_df = per_school_summary.copy()
per_school_summary['Per Student Budget'] = (per_school_summary['Per Student Budget'].replace( '[\$,)]','', 
                                                                                             regex=True).astype(float)) 

# Use `pd.cut` to categorize spending based on the bins.
school_spending_df["Spending Ranges (Per Student)"] = pd.cut(x=per_school_summary["Per Student Budget"], 
                                                             bins=spending_bins, labels=labels)
school_spending_df

#  Calculate averages for the desired columns. 
spending_math_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Math Score"].mean()
spending_reading_scores = school_spending_df.groupby(["Spending Ranges (Per Student)"])["Average Reading Score"].mean()
spending_passing_math = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Math"].mean()
spending_passing_reading = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Passing Reading"].mean()
overall_passing_spending = school_spending_df.groupby(["Spending Ranges (Per Student)"])["% Overall Passing"].mean()

# Assemble into DataFrame
merge_spending = pd.merge(spending_math_scores, spending_reading_scores, on="Spending Ranges (Per Student)")
merge_spending = pd.merge(merge_spending, spending_passing_math, on="Spending Ranges (Per Student)") 
merge_spending = pd.merge(merge_spending, spending_passing_reading, on="Spending Ranges (Per Student)")
merge_spending = pd.merge(merge_spending, overall_passing_spending, on="Spending Ranges (Per Student)")
spending_summary = pd.DataFrame(data = merge_spending, columns = ["Average Math Score", "Average Reading Score", 
                            "% Passing Math", "% Passing Reading", "% Overall Passing"])


# Display results
spending_summary

# Establish the bins.
size_bins = [0, 1000, 2000, 5000]
labels = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]

# Categorize the spending based on the bins
# Use `pd.cut` on the "Total Students" column of the `per_school_summary` DataFrame.

per_school_summary["School Size"] = pd.cut(x=per_school_summary["Total Students"], bins=size_bins, labels=labels)
per_school_summary

# Calculate averages for the desired columns. 
size_math_scores = per_school_summary.groupby(["School Size"])["Average Math Score"].mean()
size_reading_scores = per_school_summary.groupby(["School Size"])["Average Reading Score"].mean()
size_passing_math = per_school_summary.groupby(["School Size"])["% Passing Math"].mean()
size_passing_reading = per_school_summary.groupby(["School Size"])["% Passing Reading"].mean()
size_overall_passing = per_school_summary.groupby(["School Size"])["% Overall Passing"].mean()

# Create a DataFrame called `size_summary` that breaks down school performance based on school size (small, medium, or large).
# Use the scores above to create a new DataFrame called `size_summary`
merge_size = pd.merge(size_math_scores, size_reading_scores, on="School Size")
merge_size = pd.merge(merge_size, size_passing_math, on="School Size") 
merge_size = pd.merge(merge_size, size_passing_reading, on="School Size")
merge_size = pd.merge(merge_size, size_overall_passing, on="School Size")
size_summary = pd.DataFrame(data = merge_size, columns = ["Average Math Score", "Average Reading Score", 
                            "% Passing Math", "% Passing Reading", "% Overall Passing"])


# Display results
size_summary

# Group the per_school_summary DataFrame by "School Type" and average the results.
average_math_score_by_type = per_school_summary.groupby(["School Type"])["Average Math Score"].mean()
average_reading_score_by_type = per_school_summary.groupby(["School Type"])["Average Reading Score"].mean()
average_percent_passing_math_by_type = per_school_summary.groupby(["School Type"])["% Passing Math"].mean()
average_percent_passing_reading_by_type = per_school_summary.groupby(["School Type"])["% Passing Reading"].mean()
average_percent_overall_passing_by_type = per_school_summary.groupby(["School Type"])["% Overall Passing"].mean()

# Assemble the new data by type into a DataFrame called `type_summary`
type_summary = pd.merge(average_math_score_by_type, average_reading_score_by_type, on="School Type")
type_summary = pd.merge(type_summary, average_percent_passing_math_by_type, on="School Type") 
type_summary = pd.merge(type_summary, average_percent_passing_reading_by_type, on="School Type")
type_summary = pd.merge(type_summary, average_percent_overall_passing_by_type, on="School Type")
type_summary = pd.DataFrame(data = type_summary, columns = ["Average Math Score", "Average Reading Score", 
                            "% Passing Math", "% Passing Reading", "% Overall Passing"])



# Display results
type_summary
